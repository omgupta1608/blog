export default [
  {
    id: "e589ef20-0d70-442f-8bc9-db7faaaff5aa",
    title: "What are Communication Protocols?",
    body: "<p>Protocols are basically a set of rules that two machines must follow in order to communicate with each other. Machines can communicate in basically 2 ways: Either over the network or by physically connecting with each other using wires/cables.</p>\n<p><br></p>\n<p>What protocols do is they standardize each step of the entire process of two machines communicating with each other. And these steps are actually designed in a way that the protocol as a whole fits the use-case and efficiently solves the problem it was designed for.</p>\n<p><br></p>\n<p>The cool part is that anyone can build their own protocol depending on their use-case. Though designing your own protocol and using it in your infrastructure is usually not an easy thing to do but big firms with hundreds of engineers might try to do it and it may or may not be successful.&nbsp;</p>\n<p><br></p>\n<p>Some popular examples of communication protocols are:</p>\n<ol>\n  <li>Transmission Control Protocol (TCP)</li>\n  <li>User Datagram Protocol (UDP)</li>\n  <li>Hyper Text Transfer Protocol (HTTP) - h1.1, h2, h3</li>\n  <li>Simple Mail Transfer Protocol (SMTP)</li>\n  <li>File Transfer Protocol (FTP)</li>\n  <li>Advanced Message Queuing Protocol (AMQP)</li>\n  <li>and many more...</li>\n</ol>\n<p>Every protocol has some properties which effectively differentiate one from the other. There are a lot of properties linked with a protocol but some of them are very common and important, so let's take a look.</p>\n<p><br></p>\n<h3>Protocol Properties</h3>\n<p><strong>Data Format</strong></p>\n<p><br></p>\n<p>Data format specifies the language in which the two machines talk to each other. And by language, I don't mean programming language. Data formats can either be <strong>Plain text, </strong>which means it can actually be read by humans like JSON, XML, or just simple text, or <strong>Binary, </strong>which I think needs no description.</p>\n<p><br></p>\n<p><strong>State</strong></p>\n<p><br></p>\n<p>The state of a protocol basically tells us if the protocol depends on the state(s) of either or both of the participants. Protocols can either be <strong>stateful</strong> or <strong>stateless</strong>.</p>\n<p><br></p>\n<p><strong>Direction</strong></p>\n<p><br></p>\n<p>By direction, I mean the direction freedom of communication, i.e., <strong>unidirectional</strong> or <strong>bidirectional</strong> (aka bidi).</p>\n<p><br></p>\n<p><strong>Transfer Mode</strong></p>\n<p><br></p>\n<p>Transfer mode refers to the way of transferring data between participants. Now people often get confused with the terminology but transfer mode can be <strong>Message based </strong>(data is sent as packets, basically it's easy to identify where a message starts and ends) or <strong>Stream based </strong>(data is sent as a continuous stream of bytes, nonstop).</p>\n<p><br></p>\n<p><strong>Addressing</strong></p>\n<p><br></p>\n<p>Addressing is actually a complex property as it diffrentiates protocols by specifying which layer the protocol works in (by layer I mean, a layer of the OSI model).</p>\n<p><br></p>\n<p><strong>Error Management</strong></p>\n<p><br></p>\n<p>Tells us how the protocol handle errors. Like the most popular protocol, HTTP uses status codes to identify different errors.</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p>We should realize that protocols are very use-case specific and designed to solve a particular problem, and the popular ones that we all know about - TCP, UDP, HTTP, gRPC, were all built to solve a problem.</p>",
    bookmark: false,
    date: "4 Aug 2023",
  },
];
